Ans-1
Class: A class is a blueprint or a template for creating objects. It defines a set of attributes and methods that the objects instantiated from the class will have. In simple terms, a class is a user-defined data type.

Example:

class Dog:
    def __init__(self,breed,color):
        self.breed=breed
        self.color=color

    def display_info(self):
        print(f"{self.breed} {self.color}")

# Creating an object of the Car class
dog1 =Dog("German Shepherd", "Black")
dog1.display_info()

Object: An object is an instance of a class. It is a real-world entity that has attributes and behaviors as defined by its class.

Ans-2
Encapsulation: It involves bundling the data (attributes) and methods that operate on the data into a single unit known as a class. It helps in hiding the internal details of the object from the outside world.

Abstraction: Abstraction is the process of simplifying complex systems by modeling classes based on the essential properties and behaviors they possess. It involves showing only the necessary features of an object and hiding the unnecessary details.

Inheritance: It allows a new class (subclass or derived class) to inherit the characteristics and behaviors of an existing class (base class or parent class). It promotes code reuse and establishes a relationship between classes.

Polymorphism: Polymorphism allows objects of different types to be treated as objects of a common type. It enables objects to be used interchangeably, providing a way to use a single interface for different data types.

Ans-3
The __init__() function is a special method in Python classes. It is called a constructor and is automatically invoked when an object is created from a class. It initializes the attributes of the object.

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def display_info(self):
        print(f"{self.name} is {self.age} years old.")

# Creating an object of the Person class
person1 = Person("John", 30)
person1.display_info()

Ans-4
In OOP, self is a reference used to represent the instance of the class. It is the first parameter in the definition of class methods, and it refers to the instance of the class that the method is operating on. By using self, you can access the attributes and methods of the class within its own methods.

Ans-5
Inheritance is a mechanism in OOP that allows a new class (subclass) to inherit properties and behaviors from an existing class (base class or parent class). It promotes code reuse and establishes a relationship between classes.

Example of Types of Inheritance:

python
Copy code
# Single Inheritance
class Animal:
    def eat(self):
        print("Eating")

class Dog(Animal):
    def bark(self):
        print("Barking")

# Multiple Inheritance
class A:
    def method_A(self):
        print("Method A")

class B:
    def method_B(self):
        print("Method B")

class C(A, B):
    def method_C(self):
        print("Method C")

# Multilevel Inheritance
class Vehicle:
    def start(self):
        print("Vehicle starting")

class Car(Vehicle):
    def drive(self):
        print("Car driving")

class ElectricCar(Car):
    def charge(self):
        print("Electric car charging")
Single Inheritance: Dog inherits from Animal.
Multiple Inheritance: Class C inherits from both class A and class B.
Multilevel Inheritance: ElectricCar inherits from Car, which in turn inherits from Vehicle.





